package com.learn.configurations;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@EnableWebSecurity
@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter{

	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
	@Override
	protected void configure(AuthenticationManagerBuilder auth)throws Exception{
		
		auth.inMemoryAuthentication()
		.withUser("arif")
		.password(passwordEncoder().encode("admin")).roles("ADMIN");
		
		auth.inMemoryAuthentication()
		.withUser("irfana")
		.password(passwordEncoder().encode("user")).roles("USER");
	}
	
	@Override
	protected void configure(HttpSecurity httpSecurity)throws Exception{
		httpSecurity.authorizeRequests()
		.antMatchers("/","/home").permitAll()
		.antMatchers("/admin.**").access("hasRole('ADMIN')")
		.antMatchers("/common/**")
		.access("hasRole('ADMIN') or hasRole('USER')")
		.and()
		.formLogin().loginPage("/login")
		.usernameParameter("userName").passwordParameter("password")
		.and()
		.exceptionHandling().accessDeniedPage("/Access_Denied")
		.and()
		.csrf().disable();
	}
}
